{
  "name": "serverless-curl-impersonate",
  "volta": {
    "node": "20.18.1"
  },
  "packageManager": "pnpm@8.3.1",
  "engines": {
    "node": ">=18"
  },
  "type": "commonjs",
  "main": "./build/app.js",
  "module": "./build/app.js",
  "scripts": {
    "git:push": "git push origin main && git push template main",
    "build": "pnpm tsc --build",
    "command:js": "DEBUG='*' node",
    "command:ts": "DEBUG='*' pnpm tsx",
    "run:js": "pnpm command:js .",
    "run:ts": "pnpm command:ts ./src/app.ts",
    "run:deamon": "pnpm nodemon --exec \"pnpm command:ts\" --watch \"./.env\" --watch \"./src\" ./src/app.ts",
    "start": "NODE_ENV=production pnpm run:js",
    "start:dev": "NODE_ENV=production DEBUG_ENV=true pnpm run:js",
    "dev": "NODE_ENV=development DEBUG_ENV=true pnpm run:deamon",
    "dev:prod": "NODE_ENV=production DEBUG_ENV=true pnpm run:deamon",
    "yc:registry:create": "source ./scripts/pre-env.sh && yc container registry create --name $REGISTRY_NAME",
    "yc:registry:get": "source ./scripts/pre-env.sh && yc container registry get $REGISTRY_NAME",
    "yc:registry:configure": "yc container registry configure-docker",
    "yc:image:build": "source ./scripts/pre-image.sh && docker buildx build --load --platform linux/amd64 --tag $IMAGE_NAME .",
    "yc:image:push": "source ./scripts/pre-image.sh && docker image push $IMAGE_NAME",
    "yc:container:create": "source ./scripts/pre-env.sh && yc serverless container create --name $CONTAINER_NAME",
    "yc:container:print": "source ./scripts/pre-container.sh && echo \"Your serverless container is available at https://$CONTAINER_ID.containers.yandexcloud.net/\"",
    "yc:container:configure": "source ./scripts/pre-image.sh && yc serverless container revision deploy --container-name $CONTAINER_NAME --image $IMAGE_NAME --cores 1 --memory 1GB --concurrency 1 --execution-timeout 30s --service-account-id $SERVICE_ACCOUNT_ID",
    "yc:ci": "pnpm yc:image:build && pnpm yc:image:push && pnpm yc:container:configure && pnpm yc:container:print",
    "docker:image:clean": "docker image rm -f $(docker image ls -aqf dangling=true) || echo ''",
  },
  "dependencies": {
    "curl-wrap": "1.0.3",
    "debug": "^4.3.4",
    "dotenv": "16.4.7",
    "express": "4.18.2",
    "raw-body": "3.0.0",
  },
  "devDependencies": {
    "@types/debug": "^4.1.12",
    "@types/express": "4.17.17",
    "@types/node": "18.15.3",
    "nodemon": "2.0.20",
    "ts-node": "10.9.1",
    "tsx": "4.19.2",
    "typescript": "5.4.5",
    "yarnhook": "0.6.0"
  },
}
